// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// This method will first create a FormulaError in a cell and then correct that error by making the cell called a valid value.
        /// </summary>
        public void FormulaErrorToDoubleTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.FormulaErrorToDoubleTestParams.UISpreadsheetWindowExePath, this.FormulaErrorToDoubleTestParams.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 43));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(183, 29));

            // Type '=A2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorToDoubleTestParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorToDoubleTestParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.FormulaErrorToDoubleTestParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 62));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(184, 31));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorToDoubleTestParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorToDoubleTestParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(95, 43));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 16));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(55, 25));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Type '=A2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedMethod1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedMethod1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click list box
            Mouse.Click(uIItemList, new Point(822, 503));

            // Click list box
            Mouse.Click(uIItemList, new Point(822, 498));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinWindow uIValueWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIValueWindow;
            #endregion

            // Verify that the 'ClassName' property of 'Value:' window equals '3'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIValueWindowClassName, uIValueWindow.ClassName, "Value is not updating");
        }
        
        /// <summary>
        /// This method will test to make sure FormulaError is updated correctly
        /// </summary>
        public void FormulaErrorTest1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uICellNameWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UICellNameWindow;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.FormulaErrorTest1Params.UISpreadsheetWindowExePath, this.FormulaErrorTest1Params.UISpreadsheetWindowAlternateExePath);

            // Type '=A2+A3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorTest1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorTest1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click list box
            Mouse.Click(uIItemList, new Point(838, 499));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 62));

            // Type '2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorTest1Params.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorTest1Params.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(56, 74));

            // Type 'no' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorTest1Params.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorTest1Params.UIContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'Cell Name:' window
            Mouse.Click(uICellNameWindow, new Point(82, 61));

            // Type '=A2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormulaErrorTest1Params.UIContentTextBoxEditText3;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormulaErrorTest1Params.UIContentTextBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// This will assert the Value of the spreadsheet
        /// </summary>
        public void AssertValueMethod1()
        {
            #region Variable Declarations
            WinWindow uIItem2Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem2Window;
            #endregion

            // Verify that the 'ClassName' property of '2' window equals '2'
            Assert.AreEqual(this.AssertValueMethod1ExpectedValues.UIItem2WindowClassName, uIItem2Window.ClassName, "A1id not equal 2");

            // Verify that the 'ClassName' property of '2' window equals '2'
            Assert.AreEqual(this.AssertValueMethod1ExpectedValues.UIItem2WindowClassName1, uIItem2Window.ClassName, "A1 did not update correctly. ");
        }
        
        /// <summary>
        /// ContentBoxUpdateTest1 - Use 'ContentBoxUpdateTest1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ContentBoxUpdateTest1()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2'
            Assert.AreEqual(this.ContentBoxUpdateTest1ExpectedValues.UIContentTextBoxWindowClassName, uIContentTextBoxWindow.ClassName, "The contents was not updated correctly.");
        }
        
        /// <summary>
        /// UpdateLocationRecord
        /// </summary>
        public void UpdateLocationRecord()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uICellNameWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UICellNameWindow;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 55));

            // Double-Click 'Cell Name:' window
            Mouse.DoubleClick(uICellNameWindow, new Point(78, 56));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIContentTextBoxWindowClassName, uIContentTextBoxWindow.ClassName, "Did not update Contents of Cell");
        }
        
        /// <summary>
        /// EndSpreadsheet
        /// </summary>
        public void EndSpreadsheet()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(651, 169));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(38, 27));
        }
        
        /// <summary>
        /// Recording Formula Inputs
        /// </summary>
        public void RecordFormulaInput1()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordFormulaInput1Params.UISpreadsheetWindowExePath, this.RecordFormulaInput1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(181, 36));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(77, 61));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(191, 35));

            // Type '2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordFormulaInput1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordFormulaInput1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordFormulaInput1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(196, 34));

            // Type '=A2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordFormulaInput1Params.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordFormulaInput1Params.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Down}{Down}{NumPad3}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordFormulaInput1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(200, 32));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordFormulaInput1Params.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordFormulaInput1Params.UIContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '{Up}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordFormulaInput1Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(182, 37));

            // Type '=A2+A3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordFormulaInput1Params.UIContentTextBoxEditText3;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordFormulaInput1Params.UIContentTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '{Down}{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordFormulaInput1Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// The contents at this point should be =A2+A3
        /// </summary>
        public void AssertContents()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2+A3'
            Assert.AreEqual(this.AssertContentsExpectedValues.UIContentTextBoxWindowClassName, uIContentTextBoxWindow.ClassName, "Contents did not equal =A2+A3");
        }
        
        /// <summary>
        /// Recorded steps of creating a new spreadsheet
        /// </summary>
        public void CreateNewSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinClient uICellNameClient = this.UISpreadsheetWindow11.UIItemWindow.UICellNameClient;
            WinClient uICellNameClient1 = this.UISpreadsheetWindow11.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.CreateNewSpreadsheetParams.UISpreadsheetWindowExePath, this.CreateNewSpreadsheetParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(24, 13));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(42, 37));

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(76, 43));

            // Type '{NumPad6}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient1, this.CreateNewSpreadsheetParams.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// The contents of the new spreadsheet should be empty
        /// </summary>
        public void NewSSContentsEmpty()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow = this.UISpreadsheetWindow11.UISpreadsheetClient.UIContentTextBoxWindow;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals ''
            Assert.AreEqual(this.NewSSContentsEmptyExpectedValues.UIContentTextBoxWindowClassName, uIContentTextBoxWindow.ClassName, "Contents not empty after new spreadsheet created");
        }
        
        /// <summary>
        /// Records steps to enter values into a new spreadsheet.
        /// </summary>
        public void EnterValuesIntoSpreadsheetRecord()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow11.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow11.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uICellNameClient = this.UISpreadsheetWindow11.UIItemWindow.UICellNameClient;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheetWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow11.UISpreadsheetTitleBar;
            #endregion

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(66, 54));

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.EnterValuesIntoSpreadsheetRecordParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.EnterValuesIntoSpreadsheetRecordParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(73, 57));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(79, 56));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.EnterValuesIntoSpreadsheetRecordParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.EnterValuesIntoSpreadsheetRecordParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(88, 81));

            // Move 'menuStrip1' menu bar to 'Spreadsheet' title bar
            uISpreadsheetTitleBar.EnsureClickable(new Point(116, 14));
            Mouse.StartDragging(uIMenuStrip1MenuBar, new Point(218, 37));
            Mouse.StopDragging(uISpreadsheetTitleBar, new Point(116, 14));
        }
        
        /// <summary>
        /// The old spreadsheet should not be effected by changes in the new spreadsheet.
        /// </summary>
        public void OldSpreadsheetSame()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow1 = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow1;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals ''
            Assert.AreEqual(this.OldSpreadsheetSameExpectedValues.UIContentTextBoxWindow1ClassName, uIContentTextBoxWindow1.ClassName, "Contents of new spreadsheet effected old spreadsheet");
        }
        
        /// <summary>
        /// Record of closing the new spreadsheet
        /// </summary>
        public void CloseNewSpreadsheetRecord()
        {
            #region Variable Declarations
            WinWindow uISpreadsheetWindow = this.UISpreadsheetWindow;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Click 'Spreadsheet' window
            Mouse.Click(uISpreadsheetWindow, new Point(1046, 18));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(26, 31));
        }
        
        /// <summary>
        /// Record of closing the old spreadsheet
        /// </summary>
        public void CloseOldSpreadsheetRecord()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(860, 62));
        }
        
        /// <summary>
        /// Recording of a new spreadsheet opening, being updated and then saving it.
        /// </summary>
        public void OpenNewFileAndSaveRecord()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow11.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uICellNameClient = this.UISpreadsheetWindow11.UIItemWindow.UICellNameClient;
            WinWindow uICellNameWindow = this.UISpreadsheetWindow11.UISpreadsheetClient.UICellNameWindow;
            WinButton uICloseButton = this.UISpreadsheetWindow11.UISpreadsheetTitleBar.UICloseButton;
            WinTreeItem uIDesktopTreeItem = this.UIPleaseselectafiletooWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem.UIDesktopTreeItem;
            WinList uIItemsViewList = this.UIPleaseselectafiletooWindow.UIItemsViewWindow.UIItemsViewList;
            WinWindow uIItemWindow = this.UIPleaseselectafiletooWindow.UIItemWindow.UIItemsViewList.UIItemWindow;
            WinTitleBar uIConfirmSaveAsTitleBar = this.UIConfirmSaveAsWindow.UIConfirmSaveAsTitleBar;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenNewFileAndSaveRecordParams.UISpreadsheetWindowExePath, this.OpenNewFileAndSaveRecordParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(28, 14));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(44, 34));

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(63, 63));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(78, 78));

            // Click 'Cell Name:' window
            Mouse.Click(uICellNameWindow, new Point(73, 29));

            // Type '=A1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.OpenNewFileAndSaveRecordParams.UIContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(146, 82));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 12));

            // Click 'Cell Name:' client
            Mouse.Click(uICellNameClient, new Point(632, 324));

            // Click 'Desktop' -> 'This PC' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(32, 11));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(57, 278));

            // Click window
            Mouse.Click(uIItemWindow, new Point(426, 105));

            // Click 'Confirm Save As' title bar
            Mouse.Click(uIConfirmSaveAsTitleBar, new Point(88, 27));
        }
        
        /// <summary>
        /// Old spreadsheet shold remain the same after the new spreadsheet is closed and saved.
        /// </summary>
        public void OldSpreadsheetSame2()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow1 = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow1;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals '""'
            Assert.AreEqual(this.OldSpreadsheetSame2ExpectedValues.UIContentTextBoxWindow1ClassName, uIContentTextBoxWindow1.ClassName, "Old contents is not unchanged after new spreadsheet is closed and saved.");
        }
        
        /// <summary>
        /// Record of opening a saved file
        /// </summary>
        public void OpenASavedFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIPleaseselectafiletooWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIPleaseselectafiletooWindow.UIItemWindow.UISpreadsheetsprdListItem.UINameEdit;
            WinList uIItemsViewList = this.UIPleaseselectafiletooWindow.UIItemsViewWindow.UIItemsViewList;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(32, 8));

            // Click 'Desktop' -> 'This PC' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(40, 8));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(28, 14));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(418, 349));
        }
        
        /// <summary>
        /// Asserts that a value was changed after a file was opened.
        /// </summary>
        public void OpenedValueAssertion()
        {
            #region Variable Declarations
            WinWindow uIItem6Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem6Window;
            #endregion

            // Verify that the 'ClassName' property of '6' window equals '6'
            Assert.AreEqual(this.OpenedValueAssertionExpectedValues.UIItem6WindowClassName, uIItem6Window.ClassName, "Value of opened file was not updated correctly");
        }
        
        /// <summary>
        /// The GUI should prompt the user to save if there are unsaved changed on close. If the user pushes cancel, then the GUI should remian open.
        /// </summary>
        public void SaveOnClosePrompt()
        {
            #region Variable Declarations
            WinWindow uICellNameWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UICellNameWindow;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.SaveOnClosePromptParams.ExePath, this.SaveOnClosePromptParams.AlternateExePath);

            // Click 'Cell Name:' window
            Mouse.Click(uICellNameWindow, new Point(77, 33));

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.SaveOnClosePromptParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.SaveOnClosePromptParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(82, 61));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(34, 8));
        }
        
        /// <summary>
        /// The spreadsheet and the values within it should remain after the user presses cancel when trying to close out app.
        /// </summary>
        public void SpreadsheetRemainsOpenAfterCancel()
        {
            #region Variable Declarations
            WinWindow uIItem6Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem6Window;
            #endregion

            // Verify that the 'ClassName' property of '6' window equals '6'
            Assert.AreEqual(this.SpreadsheetRemainsOpenAfterCancelExpectedValues.UIItem6WindowClassName, uIItem6Window.ClassName, "The value of cell A1 did not remain after canceling a close call. ");
        }
        
        /// <summary>
        /// If the user presses no after being prompted to save during a close call, the app should close, thus losing the spreadsheet.
        /// </summary>
        public void CloseWithUnsavedChanges()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 10));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(35, 24));
        }
        
        /// <summary>
        /// Simply opens the spreadsheet
        /// </summary>
        public void OpenSpreadsheetShortcut()
        {

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetShortcutParams.ExePath, this.OpenSpreadsheetShortcutParams.AlternateExePath);
        }
        
        /// <summary>
        /// Place a single value in tests
        /// </summary>
        public void PlaceValueInCell()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.PlaceValueInCellParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.PlaceValueInCellParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(92, 63));
        }
        
        /// <summary>
        /// Record of using the Go To Cell text box to instantly go to a new cell and input the new data.
        /// </summary>
        public void GoToCellRecord()
        {
            #region Variable Declarations
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinEdit uIGoToCellTextBoxEdit = this.UISpreadsheetWindow.UIGoToCellTextBoxWindow.UIGoToCellTextBoxEdit;
            WinTitleBar uIItemTitleBar = this.UIItemWindow.UIItemWindow1.UIItemTitleBar;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(202, 32));

            // Type '32' in 'goToCellTextBox' text box
            uIGoToCellTextBoxEdit.Text = this.GoToCellRecordParams.UIGoToCellTextBoxEditText;

            // Type '{Enter}' in 'goToCellTextBox' text box
            Keyboard.SendKeys(uIGoToCellTextBoxEdit, this.GoToCellRecordParams.UIGoToCellTextBoxEditSendKeys, ModifierKeys.None);

            // Click title bar
            Mouse.Click(uIItemTitleBar, new Point(24, 23));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(213, 33));

            // Type 'A20' in 'goToCellTextBox' text box
            uIGoToCellTextBoxEdit.Text = this.GoToCellRecordParams.UIGoToCellTextBoxEditText1;

            // Type '{Enter}' in 'goToCellTextBox' text box
            Keyboard.SendKeys(uIGoToCellTextBoxEdit, this.GoToCellRecordParams.UIGoToCellTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '=A1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.GoToCellRecordParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.GoToCellRecordParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(165, 126));
        }
        
        /// <summary>
        /// Cell Name should be correctafter using Go To Cell
        /// </summary>
        public void CellNameIsUpdatedAssert()
        {
            #region Variable Declarations
            WinWindow uIContentTextBoxWindow1 = this.UISpreadsheetWindow.UISpreadsheetClient.UIContentTextBoxWindow1;
            WinWindow uIA20Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIA20Window;
            #endregion

            // Verify that the 'ClassName' property of 'contentTextBox' window equals '6'
            Assert.AreEqual(this.CellNameIsUpdatedAssertExpectedValues.UIContentTextBoxWindow1ClassName, uIContentTextBoxWindow1.ClassName, "Move to cell using GoToCell and update");

            // Verify that the 'ClassName' property of 'A20' window equals 'A20'
            Assert.AreEqual(this.CellNameIsUpdatedAssertExpectedValues.UIA20WindowClassName, uIA20Window.ClassName, "Cell Name is updated");
        }
        
        /// <summary>
        /// Simply Close Spreadsheet
        /// </summary>
        public void CloseSpreadsheet()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            WinControl uISpreadsheetDialog = this.UISpreadsheetWindow1.UISpreadsheetDialog;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 17));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(112, 27));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 12));

            // Click 'Spreadsheet' Dialog
            Mouse.Click(uISpreadsheetDialog, new Point(45, 1));
        }
        
        /// <summary>
        /// Recording of navigating the spreadsheet using Arrow Keys
        /// </summary>
        public void ArrowKeyNavigateRecord()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uICellNameClient = this.UISpreadsheetWindow.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ArrowKeyNavigateRecordParams.UISpreadsheetWindowExePath, this.ArrowKeyNavigateRecordParams.UISpreadsheetWindowAlternateExePath);

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.ArrowKeyNavigateRecordParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.ArrowKeyNavigateRecordParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.ArrowKeyNavigateRecordParams.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// The cell name label should update as the arrow keys are pressed.
        /// </summary>
        public void CellNameUpdatedUsingArrowKeys()
        {
            #region Variable Declarations
            WinWindow uIA23Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIA23Window;
            #endregion

            // Verify that the 'ClassName' property of 'A23' window equals '"A23"'
            Assert.AreEqual(this.CellNameUpdatedUsingArrowKeysExpectedValues.UIA23WindowClassName, uIA23Window.ClassName, "Cell Name does not equal \"A3\"");
        }
        
        /// <summary>
        /// The Cell Name is correctly updated using ArrowKeys
        /// </summary>
        public void CellNameIsUpdatedArrowKeys()
        {
            #region Variable Declarations
            WinWindow uIA23Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIA23Window;
            #endregion

            // Verify that the 'Name' property of 'A23' window equals 'A23'
            Assert.AreEqual(this.CellNameIsUpdatedArrowKeysExpectedValues.UIA23WindowName, uIA23Window.Name, "Does not equal A23");
        }
        
        /// <summary>
        /// Recording of moving back up to starting point using arrow keys
        /// </summary>
        public void MoveBackToStartArrowKeys()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uICellNameClient = this.UISpreadsheetWindow.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(62, 39));

            // Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.MoveBackToStartArrowKeysParams.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Recording of Moving far Left using arrowKeys
        /// </summary>
        public void MoveLeftFromStartArrowKeys()
        {
            #region Variable Declarations
            WinClient uICellNameClient = this.UISpreadsheetWindow.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.MoveLeftFromStartArrowKeysParams.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks that the cell name is updated as the user presses the arrow keys.
        /// </summary>
        public void CheckCellNameFromMovingLeftWithArrowKeys()
        {
            #region Variable Declarations
            WinWindow uIZ1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIZ1Window;
            #endregion

            // Verify that the 'Name' property of 'Z1' window equals 'Z1'
            Assert.AreEqual(this.CheckCellNameFromMovingLeftWithArrowKeysExpectedValues.UIZ1WindowName, uIZ1Window.Name, "Cell Name was not updated when moving left");
        }
        
        /// <summary>
        /// Moves the cell to the right using the arrow keys until back at A1.
        /// </summary>
        public void MoveRightToStartWithArrowKeys()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uICellNameClient = this.UISpreadsheetWindow.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(450, 35));

            // Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.MoveRightToStartWithArrowKeysParams.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// The Value placed in A1 stayed the same throughout the navigation using arrow keys.
        /// </summary>
        public void ValueStayedTheSameAfterArrowKeys()
        {
            #region Variable Declarations
            WinWindow uIItem6Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem6Window;
            #endregion

            // Verify that the 'Name' property of '6' window equals '6'
            Assert.AreEqual(this.ValueStayedTheSameAfterArrowKeysExpectedValues.UIItem6WindowName, uIItem6Window.Name, "The Value of the cell should have remained the same throughout all the movements." +
                    "");
        }
        
        /// <summary>
        /// After moving with the arrow keys, the Cell Name at the start is correct.
        /// </summary>
        public void CellNameAtStartIsCorrectArrowKeys()
        {
            #region Variable Declarations
            WinWindow uIA1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIA1Window;
            #endregion

            // Verify that the 'Name' property of 'A1' window equals 'A1'
            Assert.AreEqual(this.CellNameAtStartIsCorrectArrowKeysExpectedValues.UIA1WindowName, uIA1Window.Name, "Cell Name is correct");
        }
        
        /// <summary>
        /// Close the Spreadsheet
        /// </summary>
        public void CloseSpreadsheetArrowKeys()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(973, 170));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(49, 25));
        }
        
        /// <summary>
        /// Tests to make sure Window is resizable.
        /// </summary>
        public void ResizeWindow()
        {
            #region Variable Declarations
            WinWindow uIItemWindow = this.UISpreadsheetWindow.UICellNameClient.UIItemWindow;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinWindow uIValueWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UIValueWindow;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ResizeWindowParams.UISpreadsheetWindowExePath, this.ResizeWindowParams.UISpreadsheetWindowAlternateExePath);

            // Move window
            Mouse.StartDragging(uIItemWindow, new Point(1127, 667));
            Mouse.StopDragging(uIItemWindow, -1029, -655);

            // Type '{Right}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.ResizeWindowParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click list box
            Mouse.Click(uIItemList, new Point(418, 190));

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.ResizeWindowParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.ResizeWindowParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Move 'Value:' window to window
            uIItemWindow.EnsureClickable(new Point(834, 541));
            Mouse.StartDragging(uIValueWindow, new Point(255, 133));
            Mouse.StopDragging(uIItemWindow, new Point(834, 541));
        }
        
        /// <summary>
        /// Tests to makesure values remained th same after resizing.
        /// </summary>
        public void ValueStayedTheSameAfterResize()
        {
            #region Variable Declarations
            WinWindow uIItem6Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem6Window;
            #endregion

            // Verify that the 'Name' property of '6' window equals '6'
            Assert.AreEqual(this.ValueStayedTheSameAfterResizeExpectedValues.UIItem6WindowName, uIItem6Window.Name, "This Should be 6");
        }
        
        /// <summary>
        /// Close the Spreadsheet
        /// </summary>
        public void CloseSpreadsheetResize()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinList uIItemsViewList = this.UIPleaseselectafiletooWindow.UIItemsViewWindow.UIItemsViewList;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(1157, 126));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(355, 267));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(534, 348));
        }
        
        /// <summary>
        /// Open the Spreadsheet
        /// </summary>
        public void OpenSpreadsheetHelpMenu()
        {

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetHelpMenuParams.ExePath, this.OpenSpreadsheetHelpMenuParams.AlternateExePath);
        }
        
        /// <summary>
        /// Recording of using the help menu to edit the cell.
        /// </summary>
        public void HelpMenuEditCellRecord()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinText uIA1Text = this.UISpreadsheetWindow.UIA1Window.UIA1Text;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinText uIChangeContents1TochaText = this.UIHelpContentsWindow.UIChangeContents1TochaWindow.UIChangeContents1TochaText;
            WinText uIChangeValue1UserscanText = this.UIHelpValueWindow.UIChangeValue1UserscanWindow.UIChangeValue1UserscanText;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinText uIChangeCellName1UsersText = this.UIHelpCellNameWindow.UIChangeCellName1UsersWindow.UIChangeCellName1UsersText;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(418, 146));

            // Click 'A1' label
            Mouse.Click(uIA1Text, new Point(9, 1));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(228, 38));

            // Click 'Change Contents 1. To change the contents, first ...' label
            Mouse.Click(uIChangeContents1TochaText, new Point(285, 198));

            // Click list box
            Mouse.Click(uIItemList, new Point(416, 142));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(226, 60));

            // Click 'Change Value 1. User's can not directly change th...' label
            Mouse.Click(uIChangeValue1UserscanText, new Point(268, 150));

            // Click list box
            Mouse.Click(uIItemList, new Point(423, 152));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(169, 59));

            // Click 'Change Cell Name 1. User's can not directly chang...' label
            Mouse.Click(uIChangeCellName1UsersText, new Point(271, 48));
        }
        
        /// <summary>
        /// Recording of going to the help meun for navigation.
        /// </summary>
        public void HelpMenuNavigateRecord()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinWindow uIMenuStrip1Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIMenuStrip1Window;
            WinControl uIHelpMouseClickDialog = this.UIHelpMouseClickWindow.UIHelpMouseClickDialog;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinControl uIHelpGoToCellDialog = this.UIHelpGoToCellWindow.UIHelpGoToCellDialog;
            WinText uINavigateusingArrowKeText = this.UIHelpArrowKeysWindow.UINavigateusingArrowKeWindow.UINavigateusingArrowKeText;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(417, 144));

            // Click list box
            Mouse.Click(uIItemList, new Point(427, 191));

            // Click 'menuStrip1' window
            Mouse.Click(uIMenuStrip1Window, new Point(202, 56));

            // Click 'Help: Mouse Click' Dialog
            Mouse.Click(uIHelpMouseClickDialog, new Point(139, 30));

            // Click list box
            Mouse.Click(uIItemList, new Point(424, 152));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(178, 58));

            // Click 'Help: Go To Cell' Dialog
            Mouse.Click(uIHelpGoToCellDialog, new Point(264, 26));

            // Click list box
            Mouse.Click(uIItemList, new Point(411, 147));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(185, 80));

            // Click 'Navigate using Arrow Keys 1. Users can select cel...' label
            Mouse.Click(uINavigateusingArrowKeText, new Point(254, 64));
        }
        
        /// <summary>
        /// Recording of going to the help menu for File Menu
        /// </summary>
        public void HelpMenuFileMenuRecord()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetClient = this.UISpreadsheetWindow.UISpreadsheetClient;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            WinText uINewSpreadsheet1ToopeText = this.UIHelpNewSpreadsheetWindow.UINewSpreadsheet1ToopeWindow.UINewSpreadsheet1ToopeText;
            WinWindow uICellNameWindow = this.UISpreadsheetWindow.UISpreadsheetClient.UICellNameWindow;
            WinText uIOpenFile1ToopenapreeText = this.UIHelpOpenFileWindow.UIOpenFile1ToopenapreeWindow.UIOpenFile1ToopenapreeText;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinText uISaveFile1TosaveafileText = this.UIHelpSaveFileWindow.UISaveFile1TosaveafileWindow.UISaveFile1TosaveafileText;
            WinText uICloseSpreadsheet1TocText = this.UIHelpCloseSpreadsheetWindow.UICloseSpreadsheet1TocWindow.UICloseSpreadsheet1TocText;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(410, 148));

            // Click 'Spreadsheet' client
            Mouse.Click(uISpreadsheetClient, new Point(90, 80));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(189, 57));

            // Click 'New Spreadsheet: 1. To open a new spreadsheet win...' label
            Mouse.Click(uINewSpreadsheet1ToopeText, new Point(242, 129));

            // Click list box
            Mouse.Click(uIItemList, new Point(407, 142));

            // Click 'Cell Name:' window
            Mouse.Click(uICellNameWindow, new Point(99, 44));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(191, 83));

            // Click 'Open File: 1. To open a pre-existing file, first ...' label
            Mouse.Click(uIOpenFile1ToopenapreeText, new Point(282, 198));

            // Click list box
            Mouse.Click(uIItemList, new Point(418, 150));

            // Click 'contentTextBox' text box
            Mouse.Click(uIContentTextBoxEdit, new Point(41, 5));

            // Click 'Cell Name:' window
            Mouse.Click(uICellNameWindow, new Point(101, 45));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(197, 104));

            // Click 'Save File: 1. To save a file that has been recent...' label
            Mouse.Click(uISaveFile1TosaveafileText, new Point(270, 80));

            // Click list box
            Mouse.Click(uIItemList, new Point(411, 145));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(177, 124));

            // Click 'Close Spreadsheet: 1. To close the current spread...' label
            Mouse.Click(uICloseSpreadsheet1TocText, new Point(276, 150));
        }
        
        /// <summary>
        /// Recording of going to the Help Menu to view shortcuts.
        /// </summary>
        public void HelpMenuShortcutsRecord()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uIItemWindow1 = this.UIItemWindow1;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(422, 141));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(98, 20));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(168, 85));

            // Click list box
            Mouse.Click(uIItemList, new Point(422, 152));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(90, 13));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(173, 106));

            // Click list box
            Mouse.Click(uIItemList, new Point(410, 150));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 15));

            // Click window
            Mouse.Click(uIItemWindow1, new Point(206, 125));
        }
        
        /// <summary>
        /// Open a spreadsheet
        /// </summary>
        public void OpenSpreadsheetShortcutsTest()
        {

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetShortcutsTestParams.ExePath, this.OpenSpreadsheetShortcutsTestParams.AlternateExePath);
        }
        
        /// <summary>
        /// Recording of creating a new spreadsheet with shortcut ctrl+n.
        /// </summary>
        public void CreateNewSpreadsheetShortcut()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uICellNameClient = this.UISpreadsheetWindow.UISpreadsheetPanelWindow.UICellNameClient;
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinCheckBox uISpreadsheetGUIShortcCheckBox = this.UIItemWindow.UIFolderViewWindow.UISpreadsheetGUIShortcCheckBox;
            WinWindow uIItemWindow = this.UISpreadsheetWindow11.UICellNameClient.UIItemWindow;
            #endregion

            // Type '6' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.CreateNewSpreadsheetShortcutParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.CreateNewSpreadsheetShortcutParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(89, 63));

            // Type 'Control + n' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.CreateNewSpreadsheetShortcutParams.UICellNameClientSendKeys, ModifierKeys.Control);

            // Move list box
            Mouse.StartDragging(uIItemList, new Point(612, 127));
            Mouse.StopDragging(uIItemList, 75, 7);

            // Click 'SpreadsheetGUI - Shortcut' check box
            Mouse.Click(uISpreadsheetGUIShortcCheckBox, new Point(14, 93));

            // Click window
            Mouse.Click(uIItemWindow, new Point(858, 168));
        }
        
        /// <summary>
        /// Go To A1
        /// </summary>
        public void GoToA1()
        {
            #region Variable Declarations
            WinWindow uIValueWindow = this.UISpreadsheetWindow11.UISpreadsheetClient.UIValueWindow;
            #endregion

            // Click 'Value:' window
            Mouse.Click(uIValueWindow, new Point(124, 62));
        }
        
        /// <summary>
        /// The old spreadsheet should not be changed after pushing ctrl+n.
        /// </summary>
        public void NewSpreadsheetShortcutAssert()
        {
            #region Variable Declarations
            WinWindow uIItem6Window = this.UISpreadsheetWindow.UISpreadsheetClient.UIItem6Window;
            #endregion

            // Verify that the 'Name' property of '6' window equals '6'
            Assert.AreEqual(this.NewSpreadsheetShortcutAssertExpectedValues.UIItem6WindowName, uIItem6Window.Name, "Cell Name in Old spreadsheet not the same after ctrl+n pushed.");
        }
        
        /// <summary>
        /// Close spreadsheet for new Shortcut.
        /// </summary>
        public void CloseSpreadsheetShortcut()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(1231, 119));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(111, 30));

            // Click list box
            Mouse.Click(uIItemList, new Point(1239, 130));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(30, 24));
        }
        
        /// <summary>
        /// Open Spreadsheet
        /// </summary>
        public void OpenSpreadsheetShortcutsTest2()
        {

            // Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSpreadsheetShortcutsTest2Params.ExePath, this.OpenSpreadsheetShortcutsTest2Params.AlternateExePath);
        }
        
        /// <summary>
        /// Uses the ctrl+o to open a file.
        /// </summary>
        public void OpenASavedFileShortcut()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinTree uITreeViewTree = this.UIPleaseselectafiletooWindow.UITreeViewWindow1.UITreeViewTree;
            WinList uIItemsViewList = this.UIPleaseselectafiletooWindow.UIItemsViewWindow.UIItemsViewList;
            #endregion

            // Type 'Control + o' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.OpenASavedFileShortcutParams.UIContentTextBoxEditSendKeys, ModifierKeys.Control);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(84, 148));

            // Click 'Tree View' tree
            Mouse.Click(uITreeViewTree, new Point(245, 86));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(428, 351));
        }
        
        /// <summary>
        /// The value contained in cell A1 should be 2 at this point.
        /// </summary>
        public void OpenFileShortcutValueAssert()
        {
            #region Variable Declarations
            WinWindow uIItem2Window = this.UITestSave1Window.UITestSave1Client.UIItem2Window;
            #endregion

            // Verify that the 'Name' property of '2' window equals '2'
            Assert.AreEqual(this.OpenFileShortcutValueAssertExpectedValues.UIItem2WindowName, uIItem2Window.Name, "After opening, the GUI cell should be 2");
        }
        
        /// <summary>
        /// Use Arrow Keys to move to A3
        /// </summary>
        public void MoveToA3()
        {
            #region Variable Declarations
            WinClient uICellNameClient = this.UITestSave1Window.UISpreadsheetPanelWindow.UICellNameClient;
            #endregion

            // Type '{Down}{Down}' in 'Cell Name:' client
            Keyboard.SendKeys(uICellNameClient, this.MoveToA3Params.UICellNameClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// The value of the cell A3 should be 5, which is made up of =A1+A2
        /// </summary>
        public void CellValueAfterOpening()
        {
            #region Variable Declarations
            WinWindow uIItem5Window = this.UITestSave1Window.UITestSave1Client.UIItem5Window;
            #endregion

            // Verify that the 'Name' property of '5' window equals '5'
            Assert.AreEqual(this.CellValueAfterOpeningExpectedValues.UIItem5WindowName, uIItem5Window.Name, "The Value of the formula (A1+A2) should be 5");
        }
        
        /// <summary>
        /// The spreadsheet should close right away without prompting user for save if the file opened has not been changed in any way.
        /// </summary>
        public void CloseNewlyOpenedSpreadsheet()
        {
            #region Variable Declarations
            WinList uIItemList = this.UIItemWindow.UIFolderViewWindow.UIItemList;
            #endregion

            // Click list box
            Mouse.Click(uIItemList, new Point(1157, 126));
        }
        
        #region Properties
        public virtual FormulaErrorToDoubleTestParams FormulaErrorToDoubleTestParams
        {
            get
            {
                if ((this.mFormulaErrorToDoubleTestParams == null))
                {
                    this.mFormulaErrorToDoubleTestParams = new FormulaErrorToDoubleTestParams();
                }
                return this.mFormulaErrorToDoubleTestParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual FormulaErrorTest1Params FormulaErrorTest1Params
        {
            get
            {
                if ((this.mFormulaErrorTest1Params == null))
                {
                    this.mFormulaErrorTest1Params = new FormulaErrorTest1Params();
                }
                return this.mFormulaErrorTest1Params;
            }
        }
        
        public virtual AssertValueMethod1ExpectedValues AssertValueMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertValueMethod1ExpectedValues == null))
                {
                    this.mAssertValueMethod1ExpectedValues = new AssertValueMethod1ExpectedValues();
                }
                return this.mAssertValueMethod1ExpectedValues;
            }
        }
        
        public virtual ContentBoxUpdateTest1ExpectedValues ContentBoxUpdateTest1ExpectedValues
        {
            get
            {
                if ((this.mContentBoxUpdateTest1ExpectedValues == null))
                {
                    this.mContentBoxUpdateTest1ExpectedValues = new ContentBoxUpdateTest1ExpectedValues();
                }
                return this.mContentBoxUpdateTest1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordFormulaInput1Params RecordFormulaInput1Params
        {
            get
            {
                if ((this.mRecordFormulaInput1Params == null))
                {
                    this.mRecordFormulaInput1Params = new RecordFormulaInput1Params();
                }
                return this.mRecordFormulaInput1Params;
            }
        }
        
        public virtual AssertContentsExpectedValues AssertContentsExpectedValues
        {
            get
            {
                if ((this.mAssertContentsExpectedValues == null))
                {
                    this.mAssertContentsExpectedValues = new AssertContentsExpectedValues();
                }
                return this.mAssertContentsExpectedValues;
            }
        }
        
        public virtual CreateNewSpreadsheetParams CreateNewSpreadsheetParams
        {
            get
            {
                if ((this.mCreateNewSpreadsheetParams == null))
                {
                    this.mCreateNewSpreadsheetParams = new CreateNewSpreadsheetParams();
                }
                return this.mCreateNewSpreadsheetParams;
            }
        }
        
        public virtual NewSSContentsEmptyExpectedValues NewSSContentsEmptyExpectedValues
        {
            get
            {
                if ((this.mNewSSContentsEmptyExpectedValues == null))
                {
                    this.mNewSSContentsEmptyExpectedValues = new NewSSContentsEmptyExpectedValues();
                }
                return this.mNewSSContentsEmptyExpectedValues;
            }
        }
        
        public virtual EnterValuesIntoSpreadsheetRecordParams EnterValuesIntoSpreadsheetRecordParams
        {
            get
            {
                if ((this.mEnterValuesIntoSpreadsheetRecordParams == null))
                {
                    this.mEnterValuesIntoSpreadsheetRecordParams = new EnterValuesIntoSpreadsheetRecordParams();
                }
                return this.mEnterValuesIntoSpreadsheetRecordParams;
            }
        }
        
        public virtual OldSpreadsheetSameExpectedValues OldSpreadsheetSameExpectedValues
        {
            get
            {
                if ((this.mOldSpreadsheetSameExpectedValues == null))
                {
                    this.mOldSpreadsheetSameExpectedValues = new OldSpreadsheetSameExpectedValues();
                }
                return this.mOldSpreadsheetSameExpectedValues;
            }
        }
        
        public virtual OpenNewFileAndSaveRecordParams OpenNewFileAndSaveRecordParams
        {
            get
            {
                if ((this.mOpenNewFileAndSaveRecordParams == null))
                {
                    this.mOpenNewFileAndSaveRecordParams = new OpenNewFileAndSaveRecordParams();
                }
                return this.mOpenNewFileAndSaveRecordParams;
            }
        }
        
        public virtual OldSpreadsheetSame2ExpectedValues OldSpreadsheetSame2ExpectedValues
        {
            get
            {
                if ((this.mOldSpreadsheetSame2ExpectedValues == null))
                {
                    this.mOldSpreadsheetSame2ExpectedValues = new OldSpreadsheetSame2ExpectedValues();
                }
                return this.mOldSpreadsheetSame2ExpectedValues;
            }
        }
        
        public virtual OpenedValueAssertionExpectedValues OpenedValueAssertionExpectedValues
        {
            get
            {
                if ((this.mOpenedValueAssertionExpectedValues == null))
                {
                    this.mOpenedValueAssertionExpectedValues = new OpenedValueAssertionExpectedValues();
                }
                return this.mOpenedValueAssertionExpectedValues;
            }
        }
        
        public virtual SaveOnClosePromptParams SaveOnClosePromptParams
        {
            get
            {
                if ((this.mSaveOnClosePromptParams == null))
                {
                    this.mSaveOnClosePromptParams = new SaveOnClosePromptParams();
                }
                return this.mSaveOnClosePromptParams;
            }
        }
        
        public virtual SpreadsheetRemainsOpenAfterCancelExpectedValues SpreadsheetRemainsOpenAfterCancelExpectedValues
        {
            get
            {
                if ((this.mSpreadsheetRemainsOpenAfterCancelExpectedValues == null))
                {
                    this.mSpreadsheetRemainsOpenAfterCancelExpectedValues = new SpreadsheetRemainsOpenAfterCancelExpectedValues();
                }
                return this.mSpreadsheetRemainsOpenAfterCancelExpectedValues;
            }
        }
        
        public virtual OpenSpreadsheetShortcutParams OpenSpreadsheetShortcutParams
        {
            get
            {
                if ((this.mOpenSpreadsheetShortcutParams == null))
                {
                    this.mOpenSpreadsheetShortcutParams = new OpenSpreadsheetShortcutParams();
                }
                return this.mOpenSpreadsheetShortcutParams;
            }
        }
        
        public virtual PlaceValueInCellParams PlaceValueInCellParams
        {
            get
            {
                if ((this.mPlaceValueInCellParams == null))
                {
                    this.mPlaceValueInCellParams = new PlaceValueInCellParams();
                }
                return this.mPlaceValueInCellParams;
            }
        }
        
        public virtual GoToCellRecordParams GoToCellRecordParams
        {
            get
            {
                if ((this.mGoToCellRecordParams == null))
                {
                    this.mGoToCellRecordParams = new GoToCellRecordParams();
                }
                return this.mGoToCellRecordParams;
            }
        }
        
        public virtual CellNameIsUpdatedAssertExpectedValues CellNameIsUpdatedAssertExpectedValues
        {
            get
            {
                if ((this.mCellNameIsUpdatedAssertExpectedValues == null))
                {
                    this.mCellNameIsUpdatedAssertExpectedValues = new CellNameIsUpdatedAssertExpectedValues();
                }
                return this.mCellNameIsUpdatedAssertExpectedValues;
            }
        }
        
        public virtual ArrowKeyNavigateRecordParams ArrowKeyNavigateRecordParams
        {
            get
            {
                if ((this.mArrowKeyNavigateRecordParams == null))
                {
                    this.mArrowKeyNavigateRecordParams = new ArrowKeyNavigateRecordParams();
                }
                return this.mArrowKeyNavigateRecordParams;
            }
        }
        
        public virtual CellNameUpdatedUsingArrowKeysExpectedValues CellNameUpdatedUsingArrowKeysExpectedValues
        {
            get
            {
                if ((this.mCellNameUpdatedUsingArrowKeysExpectedValues == null))
                {
                    this.mCellNameUpdatedUsingArrowKeysExpectedValues = new CellNameUpdatedUsingArrowKeysExpectedValues();
                }
                return this.mCellNameUpdatedUsingArrowKeysExpectedValues;
            }
        }
        
        public virtual CellNameIsUpdatedArrowKeysExpectedValues CellNameIsUpdatedArrowKeysExpectedValues
        {
            get
            {
                if ((this.mCellNameIsUpdatedArrowKeysExpectedValues == null))
                {
                    this.mCellNameIsUpdatedArrowKeysExpectedValues = new CellNameIsUpdatedArrowKeysExpectedValues();
                }
                return this.mCellNameIsUpdatedArrowKeysExpectedValues;
            }
        }
        
        public virtual MoveBackToStartArrowKeysParams MoveBackToStartArrowKeysParams
        {
            get
            {
                if ((this.mMoveBackToStartArrowKeysParams == null))
                {
                    this.mMoveBackToStartArrowKeysParams = new MoveBackToStartArrowKeysParams();
                }
                return this.mMoveBackToStartArrowKeysParams;
            }
        }
        
        public virtual MoveLeftFromStartArrowKeysParams MoveLeftFromStartArrowKeysParams
        {
            get
            {
                if ((this.mMoveLeftFromStartArrowKeysParams == null))
                {
                    this.mMoveLeftFromStartArrowKeysParams = new MoveLeftFromStartArrowKeysParams();
                }
                return this.mMoveLeftFromStartArrowKeysParams;
            }
        }
        
        public virtual CheckCellNameFromMovingLeftWithArrowKeysExpectedValues CheckCellNameFromMovingLeftWithArrowKeysExpectedValues
        {
            get
            {
                if ((this.mCheckCellNameFromMovingLeftWithArrowKeysExpectedValues == null))
                {
                    this.mCheckCellNameFromMovingLeftWithArrowKeysExpectedValues = new CheckCellNameFromMovingLeftWithArrowKeysExpectedValues();
                }
                return this.mCheckCellNameFromMovingLeftWithArrowKeysExpectedValues;
            }
        }
        
        public virtual MoveRightToStartWithArrowKeysParams MoveRightToStartWithArrowKeysParams
        {
            get
            {
                if ((this.mMoveRightToStartWithArrowKeysParams == null))
                {
                    this.mMoveRightToStartWithArrowKeysParams = new MoveRightToStartWithArrowKeysParams();
                }
                return this.mMoveRightToStartWithArrowKeysParams;
            }
        }
        
        public virtual ValueStayedTheSameAfterArrowKeysExpectedValues ValueStayedTheSameAfterArrowKeysExpectedValues
        {
            get
            {
                if ((this.mValueStayedTheSameAfterArrowKeysExpectedValues == null))
                {
                    this.mValueStayedTheSameAfterArrowKeysExpectedValues = new ValueStayedTheSameAfterArrowKeysExpectedValues();
                }
                return this.mValueStayedTheSameAfterArrowKeysExpectedValues;
            }
        }
        
        public virtual CellNameAtStartIsCorrectArrowKeysExpectedValues CellNameAtStartIsCorrectArrowKeysExpectedValues
        {
            get
            {
                if ((this.mCellNameAtStartIsCorrectArrowKeysExpectedValues == null))
                {
                    this.mCellNameAtStartIsCorrectArrowKeysExpectedValues = new CellNameAtStartIsCorrectArrowKeysExpectedValues();
                }
                return this.mCellNameAtStartIsCorrectArrowKeysExpectedValues;
            }
        }
        
        public virtual ResizeWindowParams ResizeWindowParams
        {
            get
            {
                if ((this.mResizeWindowParams == null))
                {
                    this.mResizeWindowParams = new ResizeWindowParams();
                }
                return this.mResizeWindowParams;
            }
        }
        
        public virtual ValueStayedTheSameAfterResizeExpectedValues ValueStayedTheSameAfterResizeExpectedValues
        {
            get
            {
                if ((this.mValueStayedTheSameAfterResizeExpectedValues == null))
                {
                    this.mValueStayedTheSameAfterResizeExpectedValues = new ValueStayedTheSameAfterResizeExpectedValues();
                }
                return this.mValueStayedTheSameAfterResizeExpectedValues;
            }
        }
        
        public virtual OpenSpreadsheetHelpMenuParams OpenSpreadsheetHelpMenuParams
        {
            get
            {
                if ((this.mOpenSpreadsheetHelpMenuParams == null))
                {
                    this.mOpenSpreadsheetHelpMenuParams = new OpenSpreadsheetHelpMenuParams();
                }
                return this.mOpenSpreadsheetHelpMenuParams;
            }
        }
        
        public virtual OpenSpreadsheetShortcutsTestParams OpenSpreadsheetShortcutsTestParams
        {
            get
            {
                if ((this.mOpenSpreadsheetShortcutsTestParams == null))
                {
                    this.mOpenSpreadsheetShortcutsTestParams = new OpenSpreadsheetShortcutsTestParams();
                }
                return this.mOpenSpreadsheetShortcutsTestParams;
            }
        }
        
        public virtual CreateNewSpreadsheetShortcutParams CreateNewSpreadsheetShortcutParams
        {
            get
            {
                if ((this.mCreateNewSpreadsheetShortcutParams == null))
                {
                    this.mCreateNewSpreadsheetShortcutParams = new CreateNewSpreadsheetShortcutParams();
                }
                return this.mCreateNewSpreadsheetShortcutParams;
            }
        }
        
        public virtual NewSpreadsheetShortcutAssertExpectedValues NewSpreadsheetShortcutAssertExpectedValues
        {
            get
            {
                if ((this.mNewSpreadsheetShortcutAssertExpectedValues == null))
                {
                    this.mNewSpreadsheetShortcutAssertExpectedValues = new NewSpreadsheetShortcutAssertExpectedValues();
                }
                return this.mNewSpreadsheetShortcutAssertExpectedValues;
            }
        }
        
        public virtual OpenSpreadsheetShortcutsTest2Params OpenSpreadsheetShortcutsTest2Params
        {
            get
            {
                if ((this.mOpenSpreadsheetShortcutsTest2Params == null))
                {
                    this.mOpenSpreadsheetShortcutsTest2Params = new OpenSpreadsheetShortcutsTest2Params();
                }
                return this.mOpenSpreadsheetShortcutsTest2Params;
            }
        }
        
        public virtual OpenASavedFileShortcutParams OpenASavedFileShortcutParams
        {
            get
            {
                if ((this.mOpenASavedFileShortcutParams == null))
                {
                    this.mOpenASavedFileShortcutParams = new OpenASavedFileShortcutParams();
                }
                return this.mOpenASavedFileShortcutParams;
            }
        }
        
        public virtual OpenFileShortcutValueAssertExpectedValues OpenFileShortcutValueAssertExpectedValues
        {
            get
            {
                if ((this.mOpenFileShortcutValueAssertExpectedValues == null))
                {
                    this.mOpenFileShortcutValueAssertExpectedValues = new OpenFileShortcutValueAssertExpectedValues();
                }
                return this.mOpenFileShortcutValueAssertExpectedValues;
            }
        }
        
        public virtual MoveToA3Params MoveToA3Params
        {
            get
            {
                if ((this.mMoveToA3Params == null))
                {
                    this.mMoveToA3Params = new MoveToA3Params();
                }
                return this.mMoveToA3Params;
            }
        }
        
        public virtual CellValueAfterOpeningExpectedValues CellValueAfterOpeningExpectedValues
        {
            get
            {
                if ((this.mCellValueAfterOpeningExpectedValues == null))
                {
                    this.mCellValueAfterOpeningExpectedValues = new CellValueAfterOpeningExpectedValues();
                }
                return this.mCellValueAfterOpeningExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetWindow11 UISpreadsheetWindow11
        {
            get
            {
                if ((this.mUISpreadsheetWindow11 == null))
                {
                    this.mUISpreadsheetWindow11 = new UISpreadsheetWindow11();
                }
                return this.mUISpreadsheetWindow11;
            }
        }
        
        public UIPleaseselectafiletooWindow UIPleaseselectafiletooWindow
        {
            get
            {
                if ((this.mUIPleaseselectafiletooWindow == null))
                {
                    this.mUIPleaseselectafiletooWindow = new UIPleaseselectafiletooWindow();
                }
                return this.mUIPleaseselectafiletooWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIHelpContentsWindow UIHelpContentsWindow
        {
            get
            {
                if ((this.mUIHelpContentsWindow == null))
                {
                    this.mUIHelpContentsWindow = new UIHelpContentsWindow();
                }
                return this.mUIHelpContentsWindow;
            }
        }
        
        public UIHelpValueWindow UIHelpValueWindow
        {
            get
            {
                if ((this.mUIHelpValueWindow == null))
                {
                    this.mUIHelpValueWindow = new UIHelpValueWindow();
                }
                return this.mUIHelpValueWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIHelpCellNameWindow UIHelpCellNameWindow
        {
            get
            {
                if ((this.mUIHelpCellNameWindow == null))
                {
                    this.mUIHelpCellNameWindow = new UIHelpCellNameWindow();
                }
                return this.mUIHelpCellNameWindow;
            }
        }
        
        public UIHelpMouseClickWindow UIHelpMouseClickWindow
        {
            get
            {
                if ((this.mUIHelpMouseClickWindow == null))
                {
                    this.mUIHelpMouseClickWindow = new UIHelpMouseClickWindow();
                }
                return this.mUIHelpMouseClickWindow;
            }
        }
        
        public UIHelpGoToCellWindow UIHelpGoToCellWindow
        {
            get
            {
                if ((this.mUIHelpGoToCellWindow == null))
                {
                    this.mUIHelpGoToCellWindow = new UIHelpGoToCellWindow();
                }
                return this.mUIHelpGoToCellWindow;
            }
        }
        
        public UIHelpArrowKeysWindow UIHelpArrowKeysWindow
        {
            get
            {
                if ((this.mUIHelpArrowKeysWindow == null))
                {
                    this.mUIHelpArrowKeysWindow = new UIHelpArrowKeysWindow();
                }
                return this.mUIHelpArrowKeysWindow;
            }
        }
        
        public UIHelpNewSpreadsheetWindow UIHelpNewSpreadsheetWindow
        {
            get
            {
                if ((this.mUIHelpNewSpreadsheetWindow == null))
                {
                    this.mUIHelpNewSpreadsheetWindow = new UIHelpNewSpreadsheetWindow();
                }
                return this.mUIHelpNewSpreadsheetWindow;
            }
        }
        
        public UIHelpOpenFileWindow UIHelpOpenFileWindow
        {
            get
            {
                if ((this.mUIHelpOpenFileWindow == null))
                {
                    this.mUIHelpOpenFileWindow = new UIHelpOpenFileWindow();
                }
                return this.mUIHelpOpenFileWindow;
            }
        }
        
        public UIHelpSaveFileWindow UIHelpSaveFileWindow
        {
            get
            {
                if ((this.mUIHelpSaveFileWindow == null))
                {
                    this.mUIHelpSaveFileWindow = new UIHelpSaveFileWindow();
                }
                return this.mUIHelpSaveFileWindow;
            }
        }
        
        public UIHelpCloseSpreadsheetWindow UIHelpCloseSpreadsheetWindow
        {
            get
            {
                if ((this.mUIHelpCloseSpreadsheetWindow == null))
                {
                    this.mUIHelpCloseSpreadsheetWindow = new UIHelpCloseSpreadsheetWindow();
                }
                return this.mUIHelpCloseSpreadsheetWindow;
            }
        }
        
        public UITestSave1Window UITestSave1Window
        {
            get
            {
                if ((this.mUITestSave1Window == null))
                {
                    this.mUITestSave1Window = new UITestSave1Window();
                }
                return this.mUITestSave1Window;
            }
        }
        #endregion
        
        #region Fields
        private FormulaErrorToDoubleTestParams mFormulaErrorToDoubleTestParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private FormulaErrorTest1Params mFormulaErrorTest1Params;
        
        private AssertValueMethod1ExpectedValues mAssertValueMethod1ExpectedValues;
        
        private ContentBoxUpdateTest1ExpectedValues mContentBoxUpdateTest1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordFormulaInput1Params mRecordFormulaInput1Params;
        
        private AssertContentsExpectedValues mAssertContentsExpectedValues;
        
        private CreateNewSpreadsheetParams mCreateNewSpreadsheetParams;
        
        private NewSSContentsEmptyExpectedValues mNewSSContentsEmptyExpectedValues;
        
        private EnterValuesIntoSpreadsheetRecordParams mEnterValuesIntoSpreadsheetRecordParams;
        
        private OldSpreadsheetSameExpectedValues mOldSpreadsheetSameExpectedValues;
        
        private OpenNewFileAndSaveRecordParams mOpenNewFileAndSaveRecordParams;
        
        private OldSpreadsheetSame2ExpectedValues mOldSpreadsheetSame2ExpectedValues;
        
        private OpenedValueAssertionExpectedValues mOpenedValueAssertionExpectedValues;
        
        private SaveOnClosePromptParams mSaveOnClosePromptParams;
        
        private SpreadsheetRemainsOpenAfterCancelExpectedValues mSpreadsheetRemainsOpenAfterCancelExpectedValues;
        
        private OpenSpreadsheetShortcutParams mOpenSpreadsheetShortcutParams;
        
        private PlaceValueInCellParams mPlaceValueInCellParams;
        
        private GoToCellRecordParams mGoToCellRecordParams;
        
        private CellNameIsUpdatedAssertExpectedValues mCellNameIsUpdatedAssertExpectedValues;
        
        private ArrowKeyNavigateRecordParams mArrowKeyNavigateRecordParams;
        
        private CellNameUpdatedUsingArrowKeysExpectedValues mCellNameUpdatedUsingArrowKeysExpectedValues;
        
        private CellNameIsUpdatedArrowKeysExpectedValues mCellNameIsUpdatedArrowKeysExpectedValues;
        
        private MoveBackToStartArrowKeysParams mMoveBackToStartArrowKeysParams;
        
        private MoveLeftFromStartArrowKeysParams mMoveLeftFromStartArrowKeysParams;
        
        private CheckCellNameFromMovingLeftWithArrowKeysExpectedValues mCheckCellNameFromMovingLeftWithArrowKeysExpectedValues;
        
        private MoveRightToStartWithArrowKeysParams mMoveRightToStartWithArrowKeysParams;
        
        private ValueStayedTheSameAfterArrowKeysExpectedValues mValueStayedTheSameAfterArrowKeysExpectedValues;
        
        private CellNameAtStartIsCorrectArrowKeysExpectedValues mCellNameAtStartIsCorrectArrowKeysExpectedValues;
        
        private ResizeWindowParams mResizeWindowParams;
        
        private ValueStayedTheSameAfterResizeExpectedValues mValueStayedTheSameAfterResizeExpectedValues;
        
        private OpenSpreadsheetHelpMenuParams mOpenSpreadsheetHelpMenuParams;
        
        private OpenSpreadsheetShortcutsTestParams mOpenSpreadsheetShortcutsTestParams;
        
        private CreateNewSpreadsheetShortcutParams mCreateNewSpreadsheetShortcutParams;
        
        private NewSpreadsheetShortcutAssertExpectedValues mNewSpreadsheetShortcutAssertExpectedValues;
        
        private OpenSpreadsheetShortcutsTest2Params mOpenSpreadsheetShortcutsTest2Params;
        
        private OpenASavedFileShortcutParams mOpenASavedFileShortcutParams;
        
        private OpenFileShortcutValueAssertExpectedValues mOpenFileShortcutValueAssertExpectedValues;
        
        private MoveToA3Params mMoveToA3Params;
        
        private CellValueAfterOpeningExpectedValues mCellValueAfterOpeningExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UISpreadsheetWindow11 mUISpreadsheetWindow11;
        
        private UIPleaseselectafiletooWindow mUIPleaseselectafiletooWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIHelpContentsWindow mUIHelpContentsWindow;
        
        private UIHelpValueWindow mUIHelpValueWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIHelpCellNameWindow mUIHelpCellNameWindow;
        
        private UIHelpMouseClickWindow mUIHelpMouseClickWindow;
        
        private UIHelpGoToCellWindow mUIHelpGoToCellWindow;
        
        private UIHelpArrowKeysWindow mUIHelpArrowKeysWindow;
        
        private UIHelpNewSpreadsheetWindow mUIHelpNewSpreadsheetWindow;
        
        private UIHelpOpenFileWindow mUIHelpOpenFileWindow;
        
        private UIHelpSaveFileWindow mUIHelpSaveFileWindow;
        
        private UIHelpCloseSpreadsheetWindow mUIHelpCloseSpreadsheetWindow;
        
        private UITestSave1Window mUITestSave1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorToDoubleTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormulaErrorToDoubleTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '=A2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '=A2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'Value:' window equals '3'
        /// </summary>
        public string UIValueWindowClassName = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormulaErrorTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '=A2+A3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "=A2+A3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'no' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "no";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText3 = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertValueMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of '2' window equals '2'
        /// </summary>
        public string UIItem2WindowClassName = "2";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '2' window equals '2'
        /// </summary>
        public string UIItem2WindowClassName1 = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentBoxUpdateTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContentBoxUpdateTest1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2'
        /// </summary>
        public string UIContentTextBoxWindowClassName = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2'
        /// </summary>
        public string UIContentTextBoxWindowClassName = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordFormulaInput1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordFormulaInput1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Up}";
        
        /// <summary>
        /// Type '=A2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Down}{NumPad3}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Down}{Down}{NumPad3}";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Up}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Up}{Up}";
        
        /// <summary>
        /// Type '=A2+A3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText3 = "=A2+A3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Down}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertContentsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals '=A2+A3'
        /// </summary>
        public string UIContentTextBoxWindowClassName = "=A2+A3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateNewSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateNewSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '{NumPad6}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{NumPad6}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewSSContentsEmpty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewSSContentsEmptyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals ''
        /// </summary>
        public string UIContentTextBoxWindowClassName = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterValuesIntoSpreadsheetRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterValuesIntoSpreadsheetRecordParams
    {
        
        #region Fields
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OldSpreadsheetSame'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OldSpreadsheetSameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals ''
        /// </summary>
        public string UIContentTextBoxWindow1ClassName = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenNewFileAndSaveRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenNewFileAndSaveRecordParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OldSpreadsheetSame2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OldSpreadsheetSame2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals '""'
        /// </summary>
        public string UIContentTextBoxWindow1ClassName = "\"\"";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenedValueAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenedValueAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of '6' window equals '6'
        /// </summary>
        public string UIItem6WindowClassName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveOnClosePrompt'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveOnClosePromptParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SpreadsheetRemainsOpenAfterCancel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SpreadsheetRemainsOpenAfterCancelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of '6' window equals '6'
        /// </summary>
        public string UIItem6WindowClassName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheetShortcut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetShortcutParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlaceValueInCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlaceValueInCellParams
    {
        
        #region Fields
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToCellRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GoToCellRecordParams
    {
        
        #region Fields
        /// <summary>
        /// Type '32' in 'goToCellTextBox' text box
        /// </summary>
        public string UIGoToCellTextBoxEditText = "32";
        
        /// <summary>
        /// Type '{Enter}' in 'goToCellTextBox' text box
        /// </summary>
        public string UIGoToCellTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'A20' in 'goToCellTextBox' text box
        /// </summary>
        public string UIGoToCellTextBoxEditText1 = "A20";
        
        /// <summary>
        /// Type '{Enter}' in 'goToCellTextBox' text box
        /// </summary>
        public string UIGoToCellTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellNameIsUpdatedAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CellNameIsUpdatedAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'contentTextBox' window equals '6'
        /// </summary>
        public string UIContentTextBoxWindow1ClassName = "6";
        
        /// <summary>
        /// Verify that the 'ClassName' property of 'A20' window equals 'A20'
        /// </summary>
        public string UIA20WindowClassName = "A20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ArrowKeyNavigateRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ArrowKeyNavigateRecordParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Do" +
            "wn}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellNameUpdatedUsingArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CellNameUpdatedUsingArrowKeysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ClassName' property of 'A23' window equals '"A23"'
        /// </summary>
        public string UIA23WindowClassName = "\"A23\"";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellNameIsUpdatedArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CellNameIsUpdatedArrowKeysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'A23' window equals 'A23'
        /// </summary>
        public string UIA23WindowName = "A23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveBackToStartArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MoveBackToStartArrowKeysParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{Up}{" +
            "Up}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveLeftFromStartArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MoveLeftFromStartArrowKeysParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Rig" +
            "ht}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}{Right}" +
            "{Right}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCellNameFromMovingLeftWithArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCellNameFromMovingLeftWithArrowKeysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Z1' window equals 'Z1'
        /// </summary>
        public string UIZ1WindowName = "Z1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveRightToStartWithArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MoveRightToStartWithArrowKeysParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Le" +
            "ft}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueStayedTheSameAfterArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueStayedTheSameAfterArrowKeysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '6' window equals '6'
        /// </summary>
        public string UIItem6WindowName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellNameAtStartIsCorrectArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CellNameAtStartIsCorrectArrowKeysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'A1' window equals 'A1'
        /// </summary>
        public string UIA1WindowName = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ResizeWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResizeWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        
        /// <summary>
        /// Type '{Right}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Right}";
        
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueStayedTheSameAfterResize'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueStayedTheSameAfterResizeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '6' window equals '6'
        /// </summary>
        public string UIItem6WindowName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheetHelpMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetHelpMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheetShortcutsTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetShortcutsTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateNewSpreadsheetShortcut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateNewSpreadsheetShortcutParams
    {
        
        #region Fields
        /// <summary>
        /// Type '6' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + n' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewSpreadsheetShortcutAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewSpreadsheetShortcutAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '6' window equals '6'
        /// </summary>
        public string UIItem6WindowName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheetShortcutsTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenSpreadsheetShortcutsTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\natew\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\00754395\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Source\\Repos\\00754395\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.e" +
            "xe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenASavedFileShortcut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenASavedFileShortcutParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + o' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFileShortcutValueAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenFileShortcutValueAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '2' window equals '2'
        /// </summary>
        public string UIItem2WindowName = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MoveToA3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MoveToA3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Down}{Down}' in 'Cell Name:' client
        /// </summary>
        public string UICellNameClientSendKeys = "{Down}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueAfterOpening'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CellValueAfterOpeningExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '5' window equals '5'
        /// </summary>
        public string UIItem5WindowName = "5";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetClient UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UIContentTextBoxWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIGoToCellTextBoxWindow UIGoToCellTextBoxWindow
        {
            get
            {
                if ((this.mUIGoToCellTextBoxWindow == null))
                {
                    this.mUIGoToCellTextBoxWindow = new UIGoToCellTextBoxWindow(this);
                }
                return this.mUIGoToCellTextBoxWindow;
            }
        }
        
        public UISpreadsheetPanelWindow UISpreadsheetPanelWindow
        {
            get
            {
                if ((this.mUISpreadsheetPanelWindow == null))
                {
                    this.mUISpreadsheetPanelWindow = new UISpreadsheetPanelWindow(this);
                }
                return this.mUISpreadsheetPanelWindow;
            }
        }
        
        public UICellNameClient UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new UICellNameClient(this);
                }
                return this.mUICellNameClient;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetClient mUISpreadsheetClient;
        
        private UIContentTextBoxWindow mUIContentTextBoxWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIGoToCellTextBoxWindow mUIGoToCellTextBoxWindow;
        
        private UISpreadsheetPanelWindow mUISpreadsheetPanelWindow;
        
        private UICellNameClient mUICellNameClient;
        
        private UIA1Window mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetClient : WinClient
    {
        
        public UISpreadsheetClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMenuStrip1Window.SearchProperties[WinWindow.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMenuStrip1Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public WinWindow UIValueWindow
        {
            get
            {
                if ((this.mUIValueWindow == null))
                {
                    this.mUIValueWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIValueWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Value:";
                    this.mUIValueWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIValueWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueWindow;
            }
        }
        
        public WinWindow UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellNameWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Cell Name:";
                    this.mUICellNameWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUICellNameWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameWindow;
            }
        }
        
        public WinWindow UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem2Window.SearchProperties[WinWindow.PropertyNames.Name] = "2";
                    this.mUIItem2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIItem2Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItem2Window;
            }
        }
        
        public WinWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIContentTextBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIContentTextBoxWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public WinWindow UIContentTextBoxWindow1
        {
            get
            {
                if ((this.mUIContentTextBoxWindow1 == null))
                {
                    this.mUIContentTextBoxWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIContentTextBoxWindow1.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIContentTextBoxWindow1.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    this.mUIContentTextBoxWindow1.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxWindow1;
            }
        }
        
        public WinWindow UIItem6Window
        {
            get
            {
                if ((this.mUIItem6Window == null))
                {
                    this.mUIItem6Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem6Window.SearchProperties[WinWindow.PropertyNames.Name] = "6";
                    this.mUIItem6Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIItem6Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItem6Window;
            }
        }
        
        public WinWindow UIA20Window
        {
            get
            {
                if ((this.mUIA20Window == null))
                {
                    this.mUIA20Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIA20Window.SearchProperties[WinWindow.PropertyNames.Name] = "A20";
                    this.mUIA20Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIA20Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIA20Window;
            }
        }
        
        public WinWindow UIA23Window
        {
            get
            {
                if ((this.mUIA23Window == null))
                {
                    this.mUIA23Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIA23Window.SearchProperties[WinWindow.PropertyNames.Name] = "A23";
                    this.mUIA23Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIA23Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIA23Window;
            }
        }
        
        public WinWindow UIZ1Window
        {
            get
            {
                if ((this.mUIZ1Window == null))
                {
                    this.mUIZ1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIZ1Window.SearchProperties[WinWindow.PropertyNames.Name] = "Z1";
                    this.mUIZ1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIZ1Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIZ1Window;
            }
        }
        
        public WinWindow UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIA1Window.SearchProperties[WinWindow.PropertyNames.Name] = "A1";
                    this.mUIA1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIA1Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIMenuStrip1Window;
        
        private WinWindow mUIValueWindow;
        
        private WinWindow mUICellNameWindow;
        
        private WinWindow mUIItem2Window;
        
        private WinWindow mUIContentTextBoxWindow;
        
        private WinWindow mUIContentTextBoxWindow1;
        
        private WinWindow mUIItem6Window;
        
        private WinWindow mUIA20Window;
        
        private WinWindow mUIA23Window;
        
        private WinWindow mUIZ1Window;
        
        private WinWindow mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentTextBoxWindow : WinWindow
    {
        
        public UIContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGoToCellTextBoxWindow : WinWindow
    {
        
        public UIGoToCellTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "goToCellTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIGoToCellTextBoxEdit
        {
            get
            {
                if ((this.mUIGoToCellTextBoxEdit == null))
                {
                    this.mUIGoToCellTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIGoToCellTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Go To Cell: ";
                    this.mUIGoToCellTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIGoToCellTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIGoToCellTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanelWindow : WinWindow
    {
        
        public UISpreadsheetPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellNameClient.SearchProperties[WinControl.PropertyNames.Name] = "Cell Name:";
                    this.mUICellNameClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellNameClient : WinClient
    {
        
        public UICellNameClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Cell Name:";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "currentCellLabel";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIA1Text
        {
            get
            {
                if ((this.mUIA1Text == null))
                {
                    this.mUIA1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA1Text.SearchProperties[WinText.PropertyNames.Name] = "A1";
                    this.mUIA1Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIA1Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIA1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISpreadsheetTitleBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public WinControl UISpreadsheetDialog
        {
            get
            {
                if ((this.mUISpreadsheetDialog == null))
                {
                    this.mUISpreadsheetDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUISpreadsheetDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Spreadsheet";
                    this.mUISpreadsheetDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUISpreadsheetDialog.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISpreadsheetTitleBar;
        
        private WinControl mUISpreadsheetDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        
        public WinCheckBox UISpreadsheetGUIShortcCheckBox
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcCheckBox == null))
                {
                    this.mUISpreadsheetGUIShortcCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        
        private WinCheckBox mUISpreadsheetGUIShortcCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow11 : WinWindow
    {
        
        public UISpreadsheetWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanelWindow1 UISpreadsheetPanelWindow
        {
            get
            {
                if ((this.mUISpreadsheetPanelWindow == null))
                {
                    this.mUISpreadsheetPanelWindow = new UISpreadsheetPanelWindow1(this);
                }
                return this.mUISpreadsheetPanelWindow;
            }
        }
        
        public UISpreadsheetClient1 UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new UISpreadsheetClient1(this);
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UIContentTextBoxWindow1 UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow1(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UISpreadsheetTitleBar1 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar1(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UICellNameClient1 UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new UICellNameClient1(this);
                }
                return this.mUICellNameClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UISpreadsheetPanelWindow1 mUISpreadsheetPanelWindow;
        
        private UISpreadsheetClient1 mUISpreadsheetClient;
        
        private UIContentTextBoxWindow1 mUIContentTextBoxWindow;
        
        private UISpreadsheetTitleBar1 mUISpreadsheetTitleBar;
        
        private UICellNameClient1 mUICellNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellNameClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanelWindow1 : WinWindow
    {
        
        public UISpreadsheetPanelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellNameClient.SearchProperties[WinControl.PropertyNames.Name] = "Cell Name:";
                    this.mUICellNameClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellNameClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetClient1 : WinClient
    {
        
        public UISpreadsheetClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIContentTextBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIContentTextBoxWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    this.mUIContentTextBoxWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public WinWindow UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIMenuStrip1Window.SearchProperties[WinWindow.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIMenuStrip1Window.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public WinWindow UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellNameWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Cell Name:";
                    this.mUICellNameWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUICellNameWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameWindow;
            }
        }
        
        public WinWindow UIValueWindow
        {
            get
            {
                if ((this.mUIValueWindow == null))
                {
                    this.mUIValueWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIValueWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Value:";
                    this.mUIValueWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIValueWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIContentTextBoxWindow;
        
        private WinWindow mUIMenuStrip1Window;
        
        private WinWindow mUICellNameWindow;
        
        private WinWindow mUIValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentTextBoxWindow1 : WinWindow
    {
        
        public UIContentTextBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellNameClient1 : WinClient
    {
        
        public UICellNameClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Cell Name:";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPleaseselectafiletooWindow : WinWindow
    {
        
        public UIPleaseselectafiletooWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Please select a file to open as a spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemsViewWindow UIItemsViewWindow
        {
            get
            {
                if ((this.mUIItemsViewWindow == null))
                {
                    this.mUIItemsViewWindow = new UIItemsViewWindow(this);
                }
                return this.mUIItemsViewWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITreeViewWindow1 UITreeViewWindow1
        {
            get
            {
                if ((this.mUITreeViewWindow1 == null))
                {
                    this.mUITreeViewWindow1 = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemsViewWindow mUIItemsViewWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UITreeViewWindow1 mUITreeViewWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIThisPCTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new UIThisPCTreeItem(this);
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIThisPCTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIThisPCTreeItem : WinTreeItem
    {
        
        public UIThisPCTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Please select a file to open as a spreadsheet");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemsViewWindow : WinWindow
    {
        
        public UIItemsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Please select a file to open as a spreadsheet");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        
        public UISpreadsheetsprdListItem UISpreadsheetsprdListItem
        {
            get
            {
                if ((this.mUISpreadsheetsprdListItem == null))
                {
                    this.mUISpreadsheetsprdListItem = new UISpreadsheetsprdListItem(this);
                }
                return this.mUISpreadsheetsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList mUIItemsViewList;
        
        private UISpreadsheetsprdListItem mUISpreadsheetsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Horizontal Scroll Bar";
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ScrollBar";
                    this.mUIItemWindow.WindowTitles.Add("Please select a file to open as a spreadsheet");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetsprdListItem : WinListItem
    {
        
        public UISpreadsheetsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Spreadsheet.sprd";
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Please select a file to open as a spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Please select a file to open as a spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new WinTree(this);
                    #region Search Criteria
                    this.mUITreeViewTree.WindowTitles.Add("Please select a file to open as a spreadsheet");
                    #endregion
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private WinTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIConfirmSaveAsTitleBar
        {
            get
            {
                if ((this.mUIConfirmSaveAsTitleBar == null))
                {
                    this.mUIConfirmSaveAsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIConfirmSaveAsTitleBar.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIConfirmSaveAsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIConfirmSaveAsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpContentsWindow : WinWindow
    {
        
        public UIHelpContentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Contents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Contents");
            #endregion
        }
        
        #region Properties
        public UIChangeContents1TochaWindow UIChangeContents1TochaWindow
        {
            get
            {
                if ((this.mUIChangeContents1TochaWindow == null))
                {
                    this.mUIChangeContents1TochaWindow = new UIChangeContents1TochaWindow(this);
                }
                return this.mUIChangeContents1TochaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChangeContents1TochaWindow mUIChangeContents1TochaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChangeContents1TochaWindow : WinWindow
    {
        
        public UIChangeContents1TochaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Contents");
            #endregion
        }
        
        #region Properties
        public WinText UIChangeContents1TochaText
        {
            get
            {
                if ((this.mUIChangeContents1TochaText == null))
                {
                    this.mUIChangeContents1TochaText = new WinText(this);
                    #region Search Criteria
                    this.mUIChangeContents1TochaText.SearchProperties[WinText.PropertyNames.Name] = @"			 Change Contents1. To change the contents, first select a cell to edit, then click on the text box next to 'contents'.2. Now enter either a string, double or formula and press enter. 3. If you give a valid input to the contents box (string, double or valid formula), the contents will change.4. After the contents are accepted by the spreadsheet, the cell value will be updated and placed in the selected cell.5. If a change in a cell would effect a pre-existing formula, all the cells affected by that change will be highlighted for the user.";
                    this.mUIChangeContents1TochaText.WindowTitles.Add("Help: Contents");
                    #endregion
                }
                return this.mUIChangeContents1TochaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIChangeContents1TochaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpValueWindow : WinWindow
    {
        
        public UIHelpValueWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Value";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Value");
            #endregion
        }
        
        #region Properties
        public UIChangeValue1UserscanWindow UIChangeValue1UserscanWindow
        {
            get
            {
                if ((this.mUIChangeValue1UserscanWindow == null))
                {
                    this.mUIChangeValue1UserscanWindow = new UIChangeValue1UserscanWindow(this);
                }
                return this.mUIChangeValue1UserscanWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChangeValue1UserscanWindow mUIChangeValue1UserscanWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChangeValue1UserscanWindow : WinWindow
    {
        
        public UIChangeValue1UserscanWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Value");
            #endregion
        }
        
        #region Properties
        public WinText UIChangeValue1UserscanText
        {
            get
            {
                if ((this.mUIChangeValue1UserscanText == null))
                {
                    this.mUIChangeValue1UserscanText = new WinText(this);
                    #region Search Criteria
                    this.mUIChangeValue1UserscanText.SearchProperties[WinText.PropertyNames.Name] = @"			 Change Value1. User's can not directly change the value. To update value, please refer to contents.2. If you do give a valid input to the contents box (string, double or valid formula), the value will also change to reflect the contents.If a formula is entered, and has invalid variables, a formula error will be placed in value. However, if an invalid input is given an error message will show and nothing will change.4. After the contents are accepted by the spreadsheet, the cell value will be updated and placed in the selected cell.";
                    this.mUIChangeValue1UserscanText.WindowTitles.Add("Help: Value");
                    #endregion
                }
                return this.mUIChangeValue1UserscanText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIChangeValue1UserscanText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "HelpDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpCellNameWindow : WinWindow
    {
        
        public UIHelpCellNameWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Cell Name";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Cell Name");
            #endregion
        }
        
        #region Properties
        public UIChangeCellName1UsersWindow UIChangeCellName1UsersWindow
        {
            get
            {
                if ((this.mUIChangeCellName1UsersWindow == null))
                {
                    this.mUIChangeCellName1UsersWindow = new UIChangeCellName1UsersWindow(this);
                }
                return this.mUIChangeCellName1UsersWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChangeCellName1UsersWindow mUIChangeCellName1UsersWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChangeCellName1UsersWindow : WinWindow
    {
        
        public UIChangeCellName1UsersWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Cell Name");
            #endregion
        }
        
        #region Properties
        public WinText UIChangeCellName1UsersText
        {
            get
            {
                if ((this.mUIChangeCellName1UsersText == null))
                {
                    this.mUIChangeCellName1UsersText = new WinText(this);
                    #region Search Criteria
                    this.mUIChangeCellName1UsersText.SearchProperties[WinText.PropertyNames.Name] = "\t\t\t Change Cell Name1. User\'s can not directly change the cell name. To update ce" +
                        "ll name you must navigate to a cell, please refer to contents.2. Once a cell is " +
                        "selected, the location will be updated in the Cell Name label";
                    this.mUIChangeCellName1UsersText.WindowTitles.Add("Help: Cell Name");
                    #endregion
                }
                return this.mUIChangeCellName1UsersText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIChangeCellName1UsersText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpMouseClickWindow : WinWindow
    {
        
        public UIHelpMouseClickWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Mouse Click";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Mouse Click");
            #endregion
        }
        
        #region Properties
        public WinControl UIHelpMouseClickDialog
        {
            get
            {
                if ((this.mUIHelpMouseClickDialog == null))
                {
                    this.mUIHelpMouseClickDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIHelpMouseClickDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Help: Mouse Click";
                    this.mUIHelpMouseClickDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIHelpMouseClickDialog.WindowTitles.Add("Help: Mouse Click");
                    #endregion
                }
                return this.mUIHelpMouseClickDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIHelpMouseClickDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpGoToCellWindow : WinWindow
    {
        
        public UIHelpGoToCellWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Go To Cell";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Go To Cell");
            #endregion
        }
        
        #region Properties
        public WinControl UIHelpGoToCellDialog
        {
            get
            {
                if ((this.mUIHelpGoToCellDialog == null))
                {
                    this.mUIHelpGoToCellDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIHelpGoToCellDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Help: Go To Cell";
                    this.mUIHelpGoToCellDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIHelpGoToCellDialog.WindowTitles.Add("Help: Go To Cell");
                    #endregion
                }
                return this.mUIHelpGoToCellDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIHelpGoToCellDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpArrowKeysWindow : WinWindow
    {
        
        public UIHelpArrowKeysWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Arrow Keys";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Arrow Keys");
            #endregion
        }
        
        #region Properties
        public UINavigateusingArrowKeWindow UINavigateusingArrowKeWindow
        {
            get
            {
                if ((this.mUINavigateusingArrowKeWindow == null))
                {
                    this.mUINavigateusingArrowKeWindow = new UINavigateusingArrowKeWindow(this);
                }
                return this.mUINavigateusingArrowKeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINavigateusingArrowKeWindow mUINavigateusingArrowKeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINavigateusingArrowKeWindow : WinWindow
    {
        
        public UINavigateusingArrowKeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Arrow Keys");
            #endregion
        }
        
        #region Properties
        public WinText UINavigateusingArrowKeText
        {
            get
            {
                if ((this.mUINavigateusingArrowKeText == null))
                {
                    this.mUINavigateusingArrowKeText = new WinText(this);
                    #region Search Criteria
                    this.mUINavigateusingArrowKeText.SearchProperties[WinText.PropertyNames.Name] = @"		      Navigate using Arrow Keys 1. Users can select cells by pressing the arrow keys to navigate between cells.As the user navigates, the window will follow the position of the selected cell; however, the scroll bar will remain stationary. 2. The user must select a cell before the arrow keys will allow navigation.";
                    this.mUINavigateusingArrowKeText.WindowTitles.Add("Help: Arrow Keys");
                    #endregion
                }
                return this.mUINavigateusingArrowKeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINavigateusingArrowKeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpNewSpreadsheetWindow : WinWindow
    {
        
        public UIHelpNewSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: New Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UINewSpreadsheet1ToopeWindow UINewSpreadsheet1ToopeWindow
        {
            get
            {
                if ((this.mUINewSpreadsheet1ToopeWindow == null))
                {
                    this.mUINewSpreadsheet1ToopeWindow = new UINewSpreadsheet1ToopeWindow(this);
                }
                return this.mUINewSpreadsheet1ToopeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewSpreadsheet1ToopeWindow mUINewSpreadsheet1ToopeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewSpreadsheet1ToopeWindow : WinWindow
    {
        
        public UINewSpreadsheet1ToopeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UINewSpreadsheet1ToopeText
        {
            get
            {
                if ((this.mUINewSpreadsheet1ToopeText == null))
                {
                    this.mUINewSpreadsheet1ToopeText = new WinText(this);
                    #region Search Criteria
                    this.mUINewSpreadsheet1ToopeText.SearchProperties[WinText.PropertyNames.Name] = @"			 New Spreadsheet: 1. To open a new spreadsheet window, first go to File menu bar.2. Next, click New. 3. A new spreadsheet window will open that is seperate from the current spreadsheet window.NOTE: Changes in one spreadsheet will not affect another spreadsheet that is open.";
                    this.mUINewSpreadsheet1ToopeText.WindowTitles.Add("Help: New Spreadsheet");
                    #endregion
                }
                return this.mUINewSpreadsheet1ToopeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINewSpreadsheet1ToopeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpOpenFileWindow : WinWindow
    {
        
        public UIHelpOpenFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Open File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Open File");
            #endregion
        }
        
        #region Properties
        public UIOpenFile1ToopenapreeWindow UIOpenFile1ToopenapreeWindow
        {
            get
            {
                if ((this.mUIOpenFile1ToopenapreeWindow == null))
                {
                    this.mUIOpenFile1ToopenapreeWindow = new UIOpenFile1ToopenapreeWindow(this);
                }
                return this.mUIOpenFile1ToopenapreeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenFile1ToopenapreeWindow mUIOpenFile1ToopenapreeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFile1ToopenapreeWindow : WinWindow
    {
        
        public UIOpenFile1ToopenapreeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Open File");
            #endregion
        }
        
        #region Properties
        public WinText UIOpenFile1ToopenapreeText
        {
            get
            {
                if ((this.mUIOpenFile1ToopenapreeText == null))
                {
                    this.mUIOpenFile1ToopenapreeText = new WinText(this);
                    #region Search Criteria
                    this.mUIOpenFile1ToopenapreeText.SearchProperties[WinText.PropertyNames.Name] = @"			 Open File: 1. To open a pre-existing file, first go to File menu bar.2. Next click Open. 3. If there are changes that would be overwritten as a result of opening a file, then the user will be prompted to either save your changes, discard them or cancel the open file operation.4. Once the File Dialog opens, search for the file to open, select it and then click Open.NOTE: If you open a pre-existing file, the current spreadsheet will be replaced with the contents of the file chosen";
                    this.mUIOpenFile1ToopenapreeText.WindowTitles.Add("Help: Open File");
                    #endregion
                }
                return this.mUIOpenFile1ToopenapreeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIOpenFile1ToopenapreeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpSaveFileWindow : WinWindow
    {
        
        public UIHelpSaveFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Save File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Save File");
            #endregion
        }
        
        #region Properties
        public UISaveFile1TosaveafileWindow UISaveFile1TosaveafileWindow
        {
            get
            {
                if ((this.mUISaveFile1TosaveafileWindow == null))
                {
                    this.mUISaveFile1TosaveafileWindow = new UISaveFile1TosaveafileWindow(this);
                }
                return this.mUISaveFile1TosaveafileWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISaveFile1TosaveafileWindow mUISaveFile1TosaveafileWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveFile1TosaveafileWindow : WinWindow
    {
        
        public UISaveFile1TosaveafileWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Save File");
            #endregion
        }
        
        #region Properties
        public WinText UISaveFile1TosaveafileText
        {
            get
            {
                if ((this.mUISaveFile1TosaveafileText == null))
                {
                    this.mUISaveFile1TosaveafileText = new WinText(this);
                    #region Search Criteria
                    this.mUISaveFile1TosaveafileText.SearchProperties[WinText.PropertyNames.Name] = "\t\t\t Save File: 1. To save a file that has been recently changed, first go to File" +
                        " menu bar.2. Next click Save. 4. Once the File Dialog opens, search for the file" +
                        " location you wish to save the file, select it and then click Save.";
                    this.mUISaveFile1TosaveafileText.WindowTitles.Add("Help: Save File");
                    #endregion
                }
                return this.mUISaveFile1TosaveafileText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISaveFile1TosaveafileText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpCloseSpreadsheetWindow : WinWindow
    {
        
        public UIHelpCloseSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help: Close Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help: Close Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UICloseSpreadsheet1TocWindow UICloseSpreadsheet1TocWindow
        {
            get
            {
                if ((this.mUICloseSpreadsheet1TocWindow == null))
                {
                    this.mUICloseSpreadsheet1TocWindow = new UICloseSpreadsheet1TocWindow(this);
                }
                return this.mUICloseSpreadsheet1TocWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICloseSpreadsheet1TocWindow mUICloseSpreadsheet1TocWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICloseSpreadsheet1TocWindow : WinWindow
    {
        
        public UICloseSpreadsheet1TocWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help: Close Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UICloseSpreadsheet1TocText
        {
            get
            {
                if ((this.mUICloseSpreadsheet1TocText == null))
                {
                    this.mUICloseSpreadsheet1TocText = new WinText(this);
                    #region Search Criteria
                    this.mUICloseSpreadsheet1TocText.SearchProperties[WinText.PropertyNames.Name] = @"			 Close Spreadsheet: 1. To close the current spreadsheet the user may do one of two things: 	a. First go to File menu bar. Next, click Close 			OR	b. Click on the big red X in the upper right-hand corner. 2. In either case, if there are changes that would be overwritten by closing the spreadsheet, then the user will be prompted to either save changes, discard them or cancel the closing of the spreadsheet.";
                    this.mUICloseSpreadsheet1TocText.WindowTitles.Add("Help: Close Spreadsheet");
                    #endregion
                }
                return this.mUICloseSpreadsheet1TocText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICloseSpreadsheet1TocText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestSave1Window : WinWindow
    {
        
        public UITestSave1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "testSave1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("testSave1");
            #endregion
        }
        
        #region Properties
        public UITestSave1Client UITestSave1Client
        {
            get
            {
                if ((this.mUITestSave1Client == null))
                {
                    this.mUITestSave1Client = new UITestSave1Client(this);
                }
                return this.mUITestSave1Client;
            }
        }
        
        public UISpreadsheetPanelWindow2 UISpreadsheetPanelWindow
        {
            get
            {
                if ((this.mUISpreadsheetPanelWindow == null))
                {
                    this.mUISpreadsheetPanelWindow = new UISpreadsheetPanelWindow2(this);
                }
                return this.mUISpreadsheetPanelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITestSave1Client mUITestSave1Client;
        
        private UISpreadsheetPanelWindow2 mUISpreadsheetPanelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestSave1Client : WinClient
    {
        
        public UITestSave1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "testSave1";
            this.WindowTitles.Add("testSave1");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem2Window.SearchProperties[WinWindow.PropertyNames.Name] = "2";
                    this.mUIItem2Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIItem2Window.WindowTitles.Add("testSave1");
                    #endregion
                }
                return this.mUIItem2Window;
            }
        }
        
        public WinWindow UIItem5Window
        {
            get
            {
                if ((this.mUIItem5Window == null))
                {
                    this.mUIItem5Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem5Window.SearchProperties[WinWindow.PropertyNames.Name] = "5";
                    this.mUIItem5Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.STATIC", PropertyExpressionOperator.Contains));
                    this.mUIItem5Window.WindowTitles.Add("testSave1");
                    #endregion
                }
                return this.mUIItem5Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem2Window;
        
        private WinWindow mUIItem5Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanelWindow2 : WinWindow
    {
        
        public UISpreadsheetPanelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel";
            this.WindowTitles.Add("testSave1");
            #endregion
        }
        
        #region Properties
        public WinClient UICellNameClient
        {
            get
            {
                if ((this.mUICellNameClient == null))
                {
                    this.mUICellNameClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellNameClient.SearchProperties[WinControl.PropertyNames.Name] = "Cell Name:";
                    this.mUICellNameClient.WindowTitles.Add("testSave1");
                    #endregion
                }
                return this.mUICellNameClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellNameClient;
        #endregion
    }
}
